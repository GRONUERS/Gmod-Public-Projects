@name Speed Measuring instrument
@persist [SpeedTimes0_100 SpeedTimes100_200 SpeedTimes0_200 SpeedTimes200_300 SpeedTimes0_300]:array
@persist [Time0_100 Measure0_100 Time100_200 Measure100_200 Time200_300 Measure200_300] Speed
@persist Load ChassisSetStatus TimeGo TimeStandard TimeStandard100_200 TimeStandard200_300 SpeedMeasureReady [Chassis ChassisOwner]:entity ReadyAlreadyUsed Start
@persist [Text ChassisSet ChassisSetFailed ForReady TextResult Ready2Go Text0_100 Text100_200 Text0_200 Text200_300 Text0_300 Seconds MaxSpeed Be ReMeasure Average]:string
@persist [Total HasMeasured Text0_100s Text100_200s Text0_200s Text200_300s Text0_300s AvgIs Reset NoRec ResultText AvgText]:string SpeedMax Measured Result
@persist [StopTime100_200 StopTime200_300] Time

interval(10)
runOnChat(1)

if(first()|duped()|dupefinished()){
    Load = 1
    Measured = 1
    timer("LoadFinished",500)
    SpeedTimes0_100 = array() SpeedTimes100_200 = array() SpeedTimes0_200 = array()
    SpeedTimes200_300 = array() SpeedTimes0_300 = array()
    ChassisSetStatus = SpeedMeasureReady = Start = Measure0_100 = Measure0_200 = Measure0_300 = ReadyAlreadyUsed = 0
}

if(Load){
    Text = httpUrlDecode("%EB%8B%98%EC%9D%98%20%EC%84%80%EC%8B%9C%EA%B0%80%20%EC%86%8D%EB%A0%A5%20%EC%B8%A1%EC%A0%95%EA%B8%B0%20%EA%B8%B0%EC%A4%80%EC%9C%BC%EB%A1%9C%20%EC%A0%81%EC%9A%A9%EB%90%98%EC%97%88%EC%8A%B5%EB%8B%88%EB%8B%A4.%0D%0A%EC%98%AC%EB%B0%94%EB%A5%B4%EC%A7%80%20%EC%95%8A%EC%9D%80%20%EC%97%94%ED%8B%B0%ED%8B%B0%20%EC%9E%85%EB%8B%88%EB%8B%A4%2C%20%EB%8B%A4%EC%8B%9C%20%EC%84%A0%ED%83%9D%ED%95%B4%20%EC%A3%BC%EC%8B%AD%EC%8B%9C%EC%98%A4.%0D%0A%EC%86%8D%EB%A0%A5%EC%9D%84%20%EC%B8%A1%EC%A0%95%ED%95%98%EC%8B%A4%EB%A0%A4%EB%A9%B4%20%EC%B0%A8%EB%9F%89%EC%9D%84%20%EC%99%84%EC%A0%84%ED%9E%88%20%EB%A9%88%EC%B6%98%20%ED%9B%84%EC%97%90%20%2Fready%20%EB%A5%BC%20%EC%B1%84%ED%8C%85%EC%B0%BD%EC%97%90%20%EC%9E%85%EB%A0%A5%ED%95%B4%20%EC%A3%BC%EC%8B%AD%EC%8B%9C%EC%98%A4.%0D%0A%EC%B8%A1%EC%A0%95%20%ED%9B%84%20%EA%B2%B0%EA%B3%BC%EB%A5%BC%20%EB%B3%B4%EC%8B%A4%EB%A0%A4%EB%A9%B4%20%2Fresult%EB%A5%BC%20%EC%9E%85%EB%A0%A5%ED%95%B4%20%EC%A3%BC%EC%8B%AD%EC%8B%9C%EC%98%A4.%0D%0A%EC%86%8D%EB%A0%A5%20%EC%B8%A1%EC%A0%95%20%EC%A4%80%EB%B9%84%EA%B0%80%20%EB%81%9D%EB%82%AC%EC%8A%B5%EB%8B%88%EB%8B%A4%2C%20%EC%95%84%EB%AC%B4%EB%95%8C%EB%82%98%20%EC%B6%9C%EB%B0%9C%ED%95%98%EC%97%AC%20%EC%A3%BC%EC%8B%AD%EC%8B%9C%EC%98%A4.%0D%0A0-100%EC%9D%80%0D%0A100-200%EC%9D%80%0D%0A0-200%EC%9D%80%0D%0A200-300%EC%9D%80%0D%0A0-300%EC%9D%80%0D%0A%EC%B4%88%20%0D%0A%EC%B5%9C%EA%B3%A0%EC%86%8D%EB%A0%A5%EC%9D%80%0D%0A%EC%9E%85%EB%8B%88%EB%8B%A4.%0D%0A%EC%9E%AC%EC%B8%A1%EC%A0%95%EC%9D%84%20%ED%95%98%EC%8B%A4%EB%A0%A4%EB%A9%B4%20%2Frestart%EB%A5%BC%20%EC%9E%85%EB%A0%A5%ED%95%B4%20%EC%A3%BC%EC%8B%AD%EC%8B%9C%EC%98%A4.%0D%0A%EC%B8%A1%EC%A0%95%EC%B9%98%EC%9D%98%20%ED%8F%89%EA%B7%A0%EA%B0%92%EC%9D%84%20%EB%B3%B4%EC%8B%A4%EB%A0%A4%EB%A9%B4%20%2Favg%EB%A5%BC%20%EC%9E%85%EB%A0%A5%ED%95%B4%20%EC%A3%BC%EC%8B%AD%EC%8B%9C%EC%98%A4.%0D%0A%EC%B4%9D%0D%0A%EB%B2%88%20%EC%B8%A1%EC%A0%95%EB%90%98%EC%97%88%EC%9C%BC%EB%A9%B0%2C%0D%0A0-100%EC%9D%98%0D%0A100-200%EC%9D%98%0D%0A0-200%EC%9D%98%0D%0A200-300%EC%9D%98%0D%0A0-300%EC%9D%98%0D%0A%ED%8F%89%EA%B7%A0%EA%B0%92%EC%9D%80%0D%0A%ED%98%84%EC%9E%AC%EA%B9%8C%EC%A7%80%EC%9D%98%20%EA%B8%B0%EB%A1%9D%EC%9D%B4%20%EC%B4%88%EA%B8%B0%ED%99%94%20%EB%90%98%EC%97%88%EC%8A%B5%EB%8B%88%EB%8B%A4%0D%0A%EC%B8%A1%EC%A0%95%EB%90%9C%20%EA%B0%92%EC%9D%B4%20%EC%97%86%EC%8A%B5%EB%8B%88%EB%8B%A4%2C%20%EA%B2%B0%EA%B3%BC%2F%ED%8F%89%EA%B7%A0%EC%9D%84%20%ED%91%9C%EC%8B%9C%20%ED%95%98%EC%A7%80%20%EC%95%8A%EC%8A%B5%EB%8B%88%EB%8B%A4.")
    ChassisSet=Text:explode("\n"):string(1) ChassisSetFailed=Text:explode("\n"):string(2) ForReady=Text:explode("\n"):string(3) 
    TextResult=Text:explode("\n"):string(4) Ready2Go=Text:explode("\n"):string(5) Text0_100=Text:explode("\n"):string(6) 
    Text100_200=Text:explode("\n"):string(7) Text0_200=Text:explode("\n"):string(8) Text200_300=Text:explode("\n"):string(9) 
    Text0_300=Text:explode("\n"):string(10) Seconds=Text:explode("\n"):string(11) MaxSpeed=Text:explode("\n"):string(12)
    Be=Text:explode("\n"):string(13) ReMeasure=Text:explode("\n"):string(14) Average=Text:explode("\n"):string(15)
    Total=Text:explode("\n"):string(16) HasMeasured=Text:explode("\n"):string(17) Text0_100s=Text:explode("\n"):string(18) 
    Text100_200s=Text:explode("\n"):string(19) Text0_200s=Text:explode("\n"):string(20) Text200_300s=Text:explode("\n"):string(21)
    Text0_300s=Text:explode("\n"):string(22) AvgIs=Text:explode("\n"):string(23) Reset=Text:explode("\n"):string(24) NoRec=Text:explode("\n"):string(25)
    if(clk("LoadFinished")){Load=0}
}

if(owner():aimEntity():isValid()){
    if(chatClk(owner())){ 
        if(owner():lastSaid():explode(" "):string(1) == "Set"){
            hideChat(1)
            ChassisSetStatus = 1
            Chassis = owner():aimEntity()
            ChassisOwner = Chassis:owner()
            Result = 0
            sendMessageColor(vec(0,150,255),Chassis:owner():toString():explode("["):string(3):explode("]"):string(1)+ChassisSet+"\n"+ForReady)
            sendMessageColor(vec(0,150,255),TextResult)
        }
    }
}elseif(!owner():aimEntity():isValid()){
    if(chatClk(owner())){ 
        if(owner():lastSaid():explode(" "):string(1) == "Set"){
            hideChat(1)
            ChassisSetStatus = 0
            Result = 0
            sendMessageColor(vec(255,75,75),ChassisSetFailed)
            SpeedMeasureReady = 0
        }
    }
}

if(ChassisSetStatus){
    if(chatClk(ChassisOwner)){
        if(!ReadyAlreadyUsed&ChassisOwner!=owner()&ChassisOwner!=owner()&ChassisOwner:lastSaid():explode(" "):string(1) == "/ready"){
            ReadyAlreadyUsed = 1
            Measured=1
            sendMessageColor(vec(255,191,50),Ready2Go)
            SpeedMeasureReady = 1
        }
        if(ReadyAlreadyUsed&ChassisOwner!=owner()&ChassisOwner:lastSaid():explode(" "):string(1) == "/restart"){
            Measured++
            SpeedMax = Result = 0
            sendMessageColor(vec(255,191,50),Ready2Go)
        }
        
        if(!Result&ChassisOwner!=owner()&ChassisOwner:lastSaid():explode(" "):string(1) == "/result"){
            Result = 1
            ResultText = !SpeedTimes0_100[Measured,number] ? NoRec :
                         !SpeedTimes0_200[Measured,number] ? Text0_100+" "+round(Time0_100,2)+Seconds+", "+MaxSpeed+" "+floor(SpeedMax)+" km/h "+Be+"\n"+ReMeasure+" " :
                         !SpeedTimes0_300[Measured,number] ? Text0_100+" "+round(Time0_100,2)+Seconds+", "+Text100_200+" "+round(SpeedTimes100_200[Measured,number],2)+Seconds+", "+Text0_200+" "+round(SpeedTimes0_200[Measured,number],2)+Seconds+", "+MaxSpeed+" "+floor(SpeedMax)+" km/h "+Be+"\n"+ReMeasure+" " :
                          SpeedTimes0_300[Measured,number] > 0.1 ? Text0_100+" "+round(Time0_100,2)+Seconds+", "+Text100_200+" "+round(SpeedTimes100_200[Measured,number],2)+Seconds+", "+Text0_200+" "+round(SpeedTimes0_200[Measured,number],2)+Seconds+", "+Text200_300+" "+round(SpeedTimes200_300[Measured,number],2)+Seconds+", "+Text0_300+" "+round(SpeedTimes0_300[Measured,number],2)+Seconds+", "+MaxSpeed+" "+floor(SpeedMax)+" km/h "+Be+"\n"+ReMeasure+" " : ""             
            
            sendMessageColor(vec(255,191,50),ResultText)
            sendMessageColor(vec(255,191,50),Average)
            SpeedMax = SpeedMeasureReady = 0
        }
        
        if(ChassisOwner!=owner()&ChassisOwner:lastSaid():explode(" "):string(1) == "/avg"){
            AvgText = SpeedTimes0_100[Measured,number] == 0 || !SpeedTimes0_100[Measured,number] ? NoRec :
                      SpeedTimes0_200[Measured,number] == 0 || !SpeedTimes0_200[Measured,number] ? Total+" "+Measured+HasMeasured+" "+Text0_100s+" "+AvgIs+" "+round(SpeedTimes0_100:average(),2) :
                      SpeedTimes0_300[Measured,number] == 0 || !SpeedTimes0_300[Measured,number] ? Total+" "+Measured+HasMeasured+" "+Text0_100s+" "+AvgIs+" "+round(SpeedTimes0_100:average(),2)+" "+Seconds+", "+Text100_200s+" "+AvgIs+" "+round(SpeedTimes100_200:average(),2)+" "+Seconds+", "+Text0_200s+" "+AvgIs+" "+round(SpeedTimes0_200:average(),2) : 
                      !SpeedTimes0_300[Measured,number] == 0 || SpeedTimes0_300[Measured,number] ? Total+" "+Measured+HasMeasured+" "+Text0_100s+" "+AvgIs+" "+round(SpeedTimes0_100:average(),2)+" "+Seconds+", "+Text100_200s+" "+AvgIs+" "+round(SpeedTimes100_200:average(),2)+" "+Seconds+", "+Text0_200s+" "+AvgIs+" "+round(SpeedTimes0_200:average(),2)+" "+Seconds+", "+Text200_300s+" "+AvgIs+" "+round(SpeedTimes200_300:average(),2)+" "+Seconds+", "+Text0_300s+" "+AvgIs+" "+round(SpeedTimes0_300:average(),2) : ""
            
            sendMessageColor(vec(255,191,50),AvgText+" "+Seconds+" "+Be)
        }
        if(ReadyAlreadyUsed&ChassisOwner!=owner()&ChassisOwner:lastSaid():explode(" "):string(1) == "/reset"){
            SpeedTimes0_100 = array() SpeedTimes100_200 = array() SpeedTimes0_200 = array()
            SpeedTimes200_300 = array() SpeedTimes0_300 = array() 
            SpeedMax=Speed=Start=Time0_100 = Time100_200 = Time200_300 = Start = TimeGo = Result = 0
            Measure0_100 = Measure100_200 = Measure200_300 = SpeedMeasureReady = ReadyAlreadyUsed = 0
            sendMessageColor(vec(255,75,75),Reset+", "+ForReady)
            sendMessageColor(vec(255,75,75),TextResult)
        }
    }
    if(chatClk(owner())){
        if(!ReadyAlreadyUsed&owner():lastSaid():explode(" "):string(1) == "/ready"){
            ReadyAlreadyUsed = 1
            Measured=1
            sendMessageColor(vec(255,191,50),Ready2Go)
            SpeedMeasureReady = 1
        }
        if(ReadyAlreadyUsed&owner():lastSaid():explode(" "):string(1) == "/restart"){
            Measured++
            SpeedMax = Result = 0
            Time0_100 = Time100_200 = Time0_200 = Time200_300 = Time0_300 = Start = TimeGo = 0
            Measure0_100 = Measure0_200 = Measure0_300 = SpeedMeasureReady = 0
            sendMessageColor(vec(255,191,50),Ready2Go)
        }
        if(!Result&owner():lastSaid():explode(" "):string(1) == "/result"){
            Result = 1
            ResultText = !SpeedTimes0_100[Measured,number] ? NoRec :
                         !SpeedTimes0_200[Measured,number] ? Text0_100+" "+round(Time0_100,2)+Seconds+", "+MaxSpeed+" "+floor(SpeedMax)+" km/h "+Be+"\n"+ReMeasure+" " :
                         !SpeedTimes0_300[Measured,number] ? Text0_100+" "+round(Time0_100,2)+Seconds+", "+Text100_200+" "+round(SpeedTimes100_200[Measured,number],2)+Seconds+", "+Text0_200+" "+round(SpeedTimes0_200[Measured,number],2)+Seconds+", "+MaxSpeed+" "+floor(SpeedMax)+" km/h "+Be+"\n"+ReMeasure+" " :
                          SpeedTimes0_300[Measured,number] > 0.1 ? Text0_100+" "+round(Time0_100,2)+Seconds+", "+Text100_200+" "+round(SpeedTimes100_200[Measured,number],2)+Seconds+", "+Text0_200+" "+round(SpeedTimes0_200[Measured,number],2)+Seconds+", "+Text200_300+" "+round(SpeedTimes200_300[Measured,number],2)+Seconds+", "+Text0_300+" "+round(SpeedTimes0_300[Measured,number],2)+Seconds+", "+MaxSpeed+" "+floor(SpeedMax)+" km/h "+Be+"\n"+ReMeasure+" " : ""             
            
            sendMessageColor(vec(255,191,50),ResultText)
            sendMessageColor(vec(255,191,50),Average)
            SpeedMax = SpeedMeasureReady = 0
        }
        if(Result&owner():lastSaid():explode(" "):string(1) == "/avg"){
            AvgText = SpeedTimes0_100[Measured,number] == 0 || !SpeedTimes0_100[Measured,number] ? NoRec :
                      SpeedTimes0_200[Measured,number] == 0 || !SpeedTimes0_200[Measured,number] ? Total+" "+Measured+HasMeasured+" "+Text0_100s+" "+AvgIs+" "+round(SpeedTimes0_100:average(),2) :
                      SpeedTimes0_300[Measured,number] == 0 || !SpeedTimes0_300[Measured,number] ? Total+" "+Measured+HasMeasured+" "+Text0_100s+" "+AvgIs+" "+round(SpeedTimes0_100:average(),2)+" "+Seconds+", "+Text100_200s+" "+AvgIs+" "+round(SpeedTimes100_200:average(),2)+" "+Seconds+", "+Text0_200s+" "+AvgIs+" "+round(SpeedTimes0_200:average(),2) : 
                      !SpeedTimes0_300[Measured,number] == 0 || SpeedTimes0_300[Measured,number] ? Total+" "+Measured+HasMeasured+" "+Text0_100s+" "+AvgIs+" "+round(SpeedTimes0_100:average(),2)+" "+Seconds+", "+Text100_200s+" "+AvgIs+" "+round(SpeedTimes100_200:average(),2)+" "+Seconds+", "+Text0_200s+" "+AvgIs+" "+round(SpeedTimes0_200:average(),2)+" "+Seconds+", "+Text200_300s+" "+AvgIs+" "+round(SpeedTimes200_300:average(),2)+" "+Seconds+", "+Text0_300s+" "+AvgIs+" "+round(SpeedTimes0_300:average(),2) : ""
            
            sendMessageColor(vec(255,191,50),AvgText+" "+Seconds+" "+Be)
        }
        if(ReadyAlreadyUsed&owner():lastSaid():explode(" "):string(1) == "/reset"){
            SpeedTimes0_100 = array() SpeedTimes100_200 = array() SpeedTimes0_200 = array()
            SpeedTimes200_300 = array() SpeedTimes0_300 = array() 
            SpeedMax = Speed = Start = Time0_100 = Time100_200 = Time200_300 = TimeGo = Result = 0
            Measure0_100 = Measure100_200 = Measure200_300 = SpeedMeasureReady = ReadyAlreadyUsed = 0
            sendMessageColor(vec(255,75,75),Reset+", "+ForReady)
            sendMessageColor(vec(255,75,75),TextResult)
        }
    }
    if(changed(Measured)&ReadyAlreadyUsed){
        Time0_100 = Time100_200 = Time200_300 = Start = TimeGo = Measure0_100 = Measure100_200 = Measure200_300 = SpeedMeasureReady = 0
        timer("MeasureReady",500)
    }
}

if(!SpeedMeasureReady&clk("MeasureReady")){SpeedMeasureReady=1}
if(SpeedMeasureReady&Speed>0.9){ Start=1 }
if(!Chassis:isValid()){ChassisSetStatus=ReadyAlreadysed=SpeedMeasureReady=0}

if(changed(ChassisSetStatus)&ChassisSetStatus){
    SpeedTimes0_100 = array() SpeedTimes100_200 = array() SpeedTimes0_200 = array()
    SpeedTimes200_300 = array() SpeedTimes0_300 = array()
    SpeedMax=Speed=Start=0
}

StopTime100_200 = Speed>99 ? 1 : 0
StopTime200_300 = Speed>199 ? 1 : 0
if(ChassisSetStatus){Speed = toUnit("km/h",Chassis:vel():length())*(1-tickInterval()) SpeedMax = max(SpeedMax,Speed)}
if(changed(Start)&Start){TimeGo = !TimeGo}
if(changed(TimeGo)&TimeGo){TimeStandard = realtime()}
if(changed(StopTime100_200)&StopTime100_200){TimeStandard100_200 = realtime()}
if(changed(StopTime200_300)&StopTime200_300){TimeStandard200_300 = realtime()}
if(TimeGo&Speed<99.8&!SpeedTimes0_100[Measured,number]>0.1){Time0_100 = realtime()-TimeStandard Measure0_100 = 1}else{Measure0_100 = 0}
if(changed(SpeedTimes100_200[Measured,number])&SpeedTimes100_200[Measured,number]>0.1){SpeedTimes0_200:pushNumber(Time0_100+Time100_200)}
if(changed(SpeedTimes200_300[Measured,number])&SpeedTimes200_300[Measured,number]>0.1){SpeedTimes0_300:pushNumber(Time0_100+Time100_200+Time200_300)}

if(TimeGo&Speed<201&Speed>99&!SpeedTimes100_200[Measured,number]>0.1){Time100_200 = realtime()-TimeStandard100_200}
if(TimeGo&Speed<301&Speed>199&!SpeedTimes200_300[Measured,number]>0.1){Time200_300 = realtime()-TimeStandard200_300}
Measure100_200 = Speed < 199 ? 0 : 1
Measure200_300 = Speed < 299 ? 0 : 1
if(changed(Measure0_100)&!Measure0_100){SpeedTimes0_100:pushNumber(Time0_100)}

if(Speed<201&Speed>99&SpeedMeasureReady&changed(Measure100_200)&Measure100_200){SpeedTimes100_200:pushNumber(Time100_200)}
if(Speed<301&Speed>199&SpeedMeasureReady&changed(Measure200_300)&Measure200_300){SpeedTimes200_300:pushNumber(Time200_300)}